# Generated by Django 4.1.2 on 2023-03-02 08:03

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuditTrials',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Avatar', models.FileField(upload_to='trials/')),
                ('Username', models.CharField(max_length=20)),
                ('Name', models.CharField(max_length=200)),
                ('Actions', models.CharField(max_length=400)),
                ('Module', models.CharField(max_length=400)),
                ('date_of_action', models.DateTimeField(default=datetime.datetime.today)),
                ('operating_system', models.CharField(max_length=200)),
                ('browser', models.CharField(max_length=200)),
                ('ip_address', models.CharField(max_length=200)),
                ('user_agent', models.TextField(max_length=200)),
            ],
            options={
                'db_table': 'audittrials',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dept_name', models.CharField(max_length=50, unique=True)),
                ('created_at', models.DateTimeField(default=datetime.datetime.today)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
                ('is_delete', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'departments',
            },
        ),
        migrations.CreateModel(
            name='ErrorLogs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Username', models.CharField(max_length=20)),
                ('Name', models.CharField(max_length=500)),
                ('Expected_error', models.CharField(max_length=500)),
                ('field_error', models.CharField(max_length=500)),
                ('trace_back', models.TextField(max_length=500)),
                ('line_number', models.IntegerField()),
                ('date_recorded', models.DateTimeField(default=datetime.datetime.today)),
                ('browser', models.CharField(max_length=500)),
                ('ip_address', models.CharField(max_length=500)),
                ('user_agent', models.TextField(max_length=500)),
                ('Avatar', models.FileField(blank=True, null=True, upload_to='errorlogs/')),
            ],
            options={
                'db_table': 'errorlogs',
            },
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position_name', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(default=datetime.datetime.today)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
                ('is_delete', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'positions',
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('gender', models.CharField(max_length=12)),
                ('phone', models.CharField(max_length=25, null=True, unique=True)),
                ('created_at', models.DateTimeField(default=datetime.datetime.today)),
                ('modified_at', models.DateTimeField(auto_now=True, null=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_agent', models.BooleanField(default=False)),
                ('is_client', models.BooleanField(default=False)),
                ('avatar', models.FileField(upload_to='avatars/')),
                ('is_delete', models.BooleanField(default=False)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='Users.department')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('position', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.RESTRICT, to='Users.position')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
                'ordering': ['-username'],
                'permissions': [('change_password', "Can change user's passwprd"), ('add_client', 'Can add client'), ('delete_client', 'Can  client'), ('change_client', 'Can add client'), ('view_client', 'Can add client'), ('add_agent', 'Can add agent'), ('delete_agent', 'Can  agent'), ('change_agent', 'Can add agent'), ('view_agent', 'Can add agent'), ('manage_role_groups', 'Can Add Or Delete Role From The Group'), ('remove_role_from_group', 'Can Remove Role From Group'), ('assign_user_to_group', 'Can Assign User To Group'), ('role_report', 'Can See Roles Report')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
